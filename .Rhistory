graphData <- tibble()
Kmax = 12                               # maximum K
SSE = numeric(Kmax)                       # initiate SSE vector
for(k in 1:Kmax){
km = kmeans(birth_death_rates, centers=k, nstart=25)   # use 25 starts
SSE[k] = km$tot.withinss                # get SSE
temp <- data
temp$num_cluster <- k
temp$cluster <- factor(km$cluster)
graphData <- rbind(graphData,temp)
}
p <- ggplot(graphData, aes(x=birth, y=death,color=cluster)) + geom_point()
# Use vars() to supply faceting variables:
p + facet_wrap(vars(num_cluster))
plot(1:Kmax, SSE, type='b', las=1, xlab="K")
km = kmeans(birth_death_rates, centers=c(1,2), nstart=25)
km = kmeans(birth_death_rates, centers=tibble(x=c(60,60),y=c(60,60)), nstart=25)
km = kmeans(birth_death_rates, centers=tibble(x=c(60,60),y=c(50,60)), nstart=25)
km = kmeans(birth_death_rates, centers=tibble(x=c(40,60),y=c(50,60)), nstart=25)
km = kmeans(birth_death_rates, centers=tibble(x=c(40,60),y=c(30,30)), nstart=25)
km = kmeans(birth_death_rates, centers=tibble(x=c(40,60),y=c(30,30)), nstart=1)
km = kmeans(birth_death_rates, centers=tibble(x=c(40,60),y=c(30,30)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(40,60),y=c(40,40)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(40,60),y=c(50,50)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(40,60),y=c(60,60)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(50,60),y=c(60,60)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(80,80),y=c(60,60)), nstart=1)
km = kmeans(birth_death_rates, centers=tibble(x=c(80,70),y=c(60,60)), nstart=1)
km = kmeans(birth_death_rates, centers=tibble(x=c(80,65),y=c(60,60)), nstart=1)
km = kmeans(birth_death_rates, centers=tibble(x=c(80,60),y=c(60,60)), nstart=1)
km = kmeans(birth_death_rates, centers=tibble(x=c(10,60),y=c(60,60)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(30,60),y=c(30,10)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(30,60),y=c(30,10)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(30,70),y=c(30,10)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(30,10)), nstart=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(30,10)), nstart=1,iter.max=5)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(30,10)), nstart=1,iter.max=2)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(30,10)), nstart=1,iter.max=1)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(30,10)), nstart=1,iter.max=1)
ggplot(data, aes(x=birth, y=death,color=factor(km$cluster))) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
cluster <- color=factor(km$cluster)
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(30,10)), nstart=1,iter.max=1)
cluster <- factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(30,10)), nstart=1,iter.max=1)
cluster <- factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(60,10)), nstart=1,iter.max=1)
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(50,10)), nstart=1,iter.max=1)
cluster <- factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
cluster
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(50,10)), nstart=1,iter.max=1)
cluster <- factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
cluster
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70),y=c(50,10)), nstart=1,iter.max=1)
cluster <- factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,50),y=c(50,10,40)), nstart=1,iter.max=1)
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), nstart=1,iter.max=1)
cluster <- factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), nstart=1)
cluster <- factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
cluster
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
cluster
cluster)
cluster
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), iter.max=1, nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30),y=c(50,10,40)), iter.max=1, nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30,40),y=c(50,10,40,50)), iter.max=1, nstart=1)
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30,30),y=c(50,10,40,30)), iter.max=1, nstart=1)
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30,20),y=c(50,10,40,30)), iter.max=1, nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
km = kmeans(birth_death_rates, centers=tibble(x=c(60,70,30,20),y=c(50,10,40,30)), iter.max=1, nstart=1)
data$cluster<-factor(km$cluster)
ggplot(data, aes(x=birth, y=death,color=cluster)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
data(birth.death.rates.1966)
data <- birth.death.rates.1966
birth_death_rates <- data[,c('birth','death')]
ggplot(data, aes(x=birth, y=death,color=birth > 30)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100') +
stat_ellipse()
data(birth.death.rates.1966)
data <- birth.death.rates.1966
birth_death_rates <- data[,c('birth','death')]
ggplot(data, aes(x=birth, y=death,color=birth > 30)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100') +
stat_ellipse(type='norm')
ggplot(data, aes(x=birth, y=death,color=birth > 30)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100') +
stat_ellipse()
ggplot(data, aes(x=birth, y=death)) + geom_point() + xlab('Birth Rate per 100') + ylab('Death Rate per 100')
library(mclust)
mix = Mclust(X)
summary(mix)   # finds 3 clusters
library(mclust)
mix = Mclust(X)
summary(mix)   # finds 3 clusters
library(mclust)
mix = Mclust(X)
library(mixtools)
X = datasets::faithful
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(X, k=2)  # use mvnormalmixEM()
(w = GMM$lambda)           # estimated weights
(mu = GMM$mu)              # estimate means
(Sigma = GMM$sigma)        # estimated covariance matrix
sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
library(mclust)
mix = Mclust(X)
summary(mix)   # finds 3 clusters
plot(mix, what="BIC")
plot(mix, what="classification")
plot(mix, what="uncertainty")
plot(mix, what="density")
#-- get parameters
summary(mix, parameters=TRUE)
#-- More detailed analysis: see https://www.stat.washington.edu/sites/default/files/files/reports/2012/tr597.pdf
faithfulBIC = mclustBIC(X)
faithfulSummary  = summary(faithfulBIC, data=X)
faithfulSummary
plot(faithfulBIC, G=1:7,
ylim=c(-2500,-2300), legendArgs=list(x="bottomright",ncol=5))
library(mixtools)
X = datasets::faithful
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(X, k=2)  # use mvnormalmixEM()
(w = GMM$lambda)           # estimated weights
(mu = GMM$mu)              # estimate means
(Sigma = GMM$sigma)        # estimated covariance matrix
sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
#-- Load the Old Faithful data
oldf = datasets::faithful
#-- Make a ggplot object
pp = ggplot(oldf, aes(x=waiting)) + xlab("waiting time (min)")
#-- Set parameters
theta1 = c(mu=50, sigma=10)       # parameters for component 1
theta2 = c(mu=90, sigma=5)        # parameters for component 2
w = .5                            # mixture weight
#-- Make data for plotting
x.seq = seq(40, 100, length=200)     # make sequence of x values
f = dnmix(theta1, theta2, w, x.seq)  # calculate the density at those values
data.mix = tibble(x.seq, f)          # make into a data frame/tibble
#-- Make plot
pp +
geom_histogram(binwidth = 1, aes(y=stat(density)), alpha=.5) +
geom_line(data=data.mix, aes(x=x.seq, y=f), color="blue", size=1.25)
oldf = datasets::faithful
#-- Make a ggplot object
pp = ggplot(oldf, aes(x=waiting)) + xlab("waiting time (min)")
#-- Function to calculate Gaussian mixture pdf
dnmix <- function(theta1, theta2, w=.5, x.seq=seq(-4, 4, length=100)){
f1 = dnorm(x.seq, mean=theta1[1], sd=theta1[2])
f2 = dnorm(x.seq, mean=theta2[1], sd=theta2[2])
fmix = f1*w + f2*(1-w)
return(fmix)
}
#-- Set parameters
theta1 = c(mu=50, sigma=10)       # parameters for component 1
theta2 = c(mu=90, sigma=5)        # parameters for component 2
w = .5                            # mixture weight
#-- Make data for plotting
x.seq = seq(40, 100, length=200)     # make sequence of x values
f = dnmix(theta1, theta2, w, x.seq)  # calculate the density at those values
data.mix = tibble(x.seq, f)          # make into a data frame/tibble
#-- Make plot
pp +
geom_histogram(binwidth = 1, aes(y=stat(density)), alpha=.5) +
geom_line(data=data.mix, aes(x=x.seq, y=f), color="blue", size=1.25)
#-- Set parameters
theta1 = c(mu=50, sigma=10)       # parameters for component 1
theta2 = c(mu=90, sigma=5)        # parameters for component 2
w = c(.4, .6)                     # mixture weights (must sum to one)
n = 300                           # number of samples to draw
set.seed(2019)                    # set the random seed for replication
#-- (1) Draw the group labels
g = sample(c(1,2), size=n, replace=TRUE, prob=w)
#-- (2) Sample from the component densities
#   To avoid loops, generate n observations from each density and pick the
#   one according to group label.
X = ifelse(g == 1,
rnorm(n, mean=theta1[1], sd=theta1[2]),
rnorm(n, mean=theta2[1], sd=theta2[2]))
qplot(X, bins = 50, geom="histogram")
hist(X, breaks=50)
ibrary(mixtools)
X = datasets::faithful
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(X, k=2)  # use mvnormalmixEM()
(w = GMM$lambda)           # estimated weights
(mu = GMM$mu)              # estimate means
(Sigma = GMM$sigma)        # estimated covariance matrix
sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
?mixtools::mvnormalmixEM
library(mixtools)
X = datasets::faithful
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(X, k=2)  # use mvnormalmixEM()
(w = GMM$lambda)           # estimated weights
(mu = GMM$mu)              # estimate means
(Sigma = GMM$sigma)        # estimated covariance matrix
sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
?mixtools::mvnormalmixEM
library(mixtools)
X = datasets::faithful
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(X, k=2,maxit=1)  # use mvnormalmixEM()
(w = GMM$lambda)           # estimated weights
(mu = GMM$mu)              # estimate means
(Sigma = GMM$sigma)        # estimated covariance matrix
sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
library(mixtools)
X = datasets::faithful
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(X, k=2,maxit=2)  # use mvnormalmixEM()
(w = GMM$lambda)           # estimated weights
(mu = GMM$mu)              # estimate means
(Sigma = GMM$sigma)        # estimated covariance matrix
sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
library(mixtools)
X = datasets::faithful
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(X, k=2,maxit=3)  # use mvnormalmixEM()
(w = GMM$lambda)           # estimated weights
(mu = GMM$mu)              # estimate means
(Sigma = GMM$sigma)        # estimated covariance matrix
sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
data
birth_death_rates
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit=1)  # use mvnormalmixEM()
(w = GMM$lambda)           # estimated weights
(mu = GMM$mu)              # estimate means
(Sigma = GMM$sigma)        # estimated covariance matrix
sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2)  # use mvnormalmixEM()
(w = GMM$lambda)           # estimated weights
(mu = GMM$mu)              # estimate means
(Sigma = GMM$sigma)        # estimated covariance matrix
sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05,maxit=iter) # 95% is 1-alpha
}
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
title = 'Iterations: ' + iter
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05,main=title) # 95% is 1-alpha
}
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
title = 'Iterations: ' + str(iter)
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05,main=title) # 95% is 1-alpha
}
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
title = paste0('Iterations: ',iter)
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05,main=title) # 95% is 1-alpha
}
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
title = paste0('Iterations: ',iter)
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#title = paste0('Iterations: ',iter)
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
set.seed(2020)
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#title = paste0('Iterations: ',iter)
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
set.seed(2020)
for (iter in c(25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#title = paste0('Iterations: ',iter)
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
set.seed(1)
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
set.seed(4)
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
set.seed(4)
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
?mixtools::mvnormalmixEM
set.seed(4)
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = ?mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter,verb=FALSE)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
set.seed(4)
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = ?mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter,verb=FALSE)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
set.seed(4)
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = ?mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
set.seed(4)
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = ?mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
set.seed(4)
for (iter in c(1,25,50,75,100,125)){
#-- Fit K=2 component mixture model
GMM = ?mixtools::mvnormalmixEM(birth_death_rates, k=2,maxit =iter)  # use mvnormalmixEM()
#(w = GMM$lambda)           # estimated weights
#(mu = GMM$mu)              # estimate means
#(Sigma = GMM$sigma)        # estimated covariance matrix
#sapply(Sigma, det)         # determinant
#-- Plot 95% contour
plot(GMM, whichplots = 2, alpha=.05) # 95% is 1-alpha
}
